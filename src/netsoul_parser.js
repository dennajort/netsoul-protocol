module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(d) {return {type: "rep", data:d}; },
        peg$c1 = function(d) {return {type: "ping", data:d}; },
        peg$c2 = function(d) {return {type: "salut", data:d}; },
        peg$c3 = function(d) {return {type: "user_cmd", data:d}; },
        peg$c4 = peg$FAILED,
        peg$c5 = "rep ",
        peg$c6 = { type: "literal", value: "rep ", description: "\"rep \"" },
        peg$c7 = " -- ",
        peg$c8 = { type: "literal", value: " -- ", description: "\" -- \"" },
        peg$c9 = function(code, text) {return {code: code, text: text}; },
        peg$c10 = "ping ",
        peg$c11 = { type: "literal", value: "ping ", description: "\"ping \"" },
        peg$c12 = function(time) {return {timestamp: time}; },
        peg$c13 = "salut ",
        peg$c14 = { type: "literal", value: "salut ", description: "\"salut \"" },
        peg$c15 = " ",
        peg$c16 = { type: "literal", value: " ", description: "\" \"" },
        peg$c17 = function(sock, hash, ip, port, time) {return {socket: sock, hash: hash, ip: ip, port: port, timestamp: time}; },
        peg$c18 = "user_cmd ",
        peg$c19 = { type: "literal", value: "user_cmd ", description: "\"user_cmd \"" },
        peg$c20 = ":user:",
        peg$c21 = { type: "literal", value: ":user:", description: "\":user:\"" },
        peg$c22 = "/",
        peg$c23 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c24 = ":",
        peg$c25 = { type: "literal", value: ":", description: "\":\"" },
        peg$c26 = "@",
        peg$c27 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c28 = " | ",
        peg$c29 = { type: "literal", value: " | ", description: "\" | \"" },
        peg$c30 = function(sock, low, high, login, ip, work, loc, group, cmd) {return {socket: sock, trust_level_low: low, trust_level_high: high, login: login, ip: ip, workstation_type: work, location: loc, group: group, cmd: cmd}; },
        peg$c31 = "login",
        peg$c32 = { type: "literal", value: "login", description: "\"login\"" },
        peg$c33 = function() {return {type: "login"}; },
        peg$c34 = "logout",
        peg$c35 = { type: "literal", value: "logout", description: "\"logout\"" },
        peg$c36 = function() {return {type: "logout"}; },
        peg$c37 = "who ",
        peg$c38 = { type: "literal", value: "who ", description: "\"who \"" },
        peg$c39 = function(d) {return {type: "who", data: d}; },
        peg$c40 = "who rep 002 -- cmd end",
        peg$c41 = { type: "literal", value: "who rep 002 -- cmd end", description: "\"who rep 002 -- cmd end\"" },
        peg$c42 = function() {return {type: "who_end"}; },
        peg$c43 = "state ",
        peg$c44 = { type: "literal", value: "state ", description: "\"state \"" },
        peg$c45 = function(state) {return {type: "state", data: state}; },
        peg$c46 = " dst=",
        peg$c47 = { type: "literal", value: " dst=", description: "\" dst=\"" },
        peg$c48 = function(cmd, data, dests) {return {type: "other", data: {cmd: cmd, data: data, dests: dests}}; },
        peg$c49 = function(sock, login, ip, log_time, chg_time, low, high, work, loc, group, state, res) { return {socket:sock, login: login, ip: ip, login_timestamp: log_time, last_change_timestamp: chg_time, trust_level_low: low, trust_level_high: high, workstation_type: work, location: loc, group: group, state: state, resource: res}; },
        peg$c50 = "{",
        peg$c51 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c52 = "}",
        peg$c53 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c54 = function(logins) { return logins; },
        peg$c55 = ",",
        peg$c56 = { type: "literal", value: ",", description: "\",\"" },
        peg$c57 = function(login, logins) { return [login].concat(logins); },
        peg$c58 = function(login) { return [login]; },
        peg$c59 = function(nb) { return nb; },
        peg$c60 = [],
        peg$c61 = /^[0-9]/,
        peg$c62 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c63 = ".",
        peg$c64 = { type: "literal", value: ".", description: "\".\"" },
        peg$c65 = /^[0-9a-fA-F]/,
        peg$c66 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c67 = function(nb) { return parseInt(nb, 10); },
        peg$c68 = function(data) { return decodeURIComponent(data); },
        peg$c69 = /^[^ :]/,
        peg$c70 = { type: "class", value: "[^ :]", description: "[^ :]" },
        peg$c71 = { type: "any", description: "any character" },
        peg$c72 = /^[a-zA-Z_]/,
        peg$c73 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c74 = /^[a-zA-z]/,
        peg$c75 = { type: "class", value: "[a-zA-z]", description: "[a-zA-z]" },
        peg$c76 = function(state, time) {return {state: state, timestamp: time}; },
        peg$c77 = function(state) {return {state: state}; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsecommand();

      return s0;
    }

    function peg$parsecommand() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parserep_command();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseping_command();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c1(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsesalut_command();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseuser_command();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c3(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parserep_command() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c5) {
        s1 = peg$c5;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c7) {
            s3 = peg$c7;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parserandom_data();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c9(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseping_command() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c10) {
        s1 = peg$c10;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c12(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsesalut_command() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c13) {
        s1 = peg$c13;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 32) {
            s3 = peg$c15;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsemd5_hash();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s5 = peg$c15;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseip_addr();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s7 = peg$c15;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseint();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 32) {
                        s9 = peg$c15;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c16); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseint();
                        if (s10 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c17(s2, s4, s6, s8, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseuser_command() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c20) {
            s3 = peg$c20;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseint();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s5 = peg$c22;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseint();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s7 = peg$c24;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parselogin();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 64) {
                        s9 = peg$c26;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c27); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseip_addr();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s11 = peg$c24;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c25); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parseno_space();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s13 = peg$c24;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c25); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = peg$parseencoded();
                                if (s14 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s15 = peg$c24;
                                    peg$currPos++;
                                  } else {
                                    s15 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                                  }
                                  if (s15 !== peg$FAILED) {
                                    s16 = peg$parseno_space();
                                    if (s16 !== peg$FAILED) {
                                      if (input.substr(peg$currPos, 3) === peg$c28) {
                                        s17 = peg$c28;
                                        peg$currPos += 3;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c29); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s18 = peg$parseuser_command_cmd();
                                        if (s18 !== peg$FAILED) {
                                          peg$reportedPos = s0;
                                          s1 = peg$c30(s2, s4, s6, s8, s10, s12, s14, s16, s18);
                                          s0 = s1;
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c4;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c4;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c4;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c4;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c4;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c4;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c4;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c4;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parseuser_command_cmd() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c31) {
        s1 = peg$c31;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c33();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c34) {
          s1 = peg$c34;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c36();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c37) {
            s1 = peg$c37;
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseuser_command_who();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c39(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 22) === peg$c40) {
              s1 = peg$c40;
              peg$currPos += 22;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c42();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c43) {
                s1 = peg$c43;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsestate();
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c45(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseno_space();
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 32) {
                    s2 = peg$c15;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseencoded();
                    if (s3 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 5) === peg$c46) {
                        s4 = peg$c46;
                        peg$currPos += 5;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c47); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsedests();
                        if (s5 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c48(s1, s3, s5);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseuser_command_who() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;

      s0 = peg$currPos;
      s1 = peg$parseint();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c15;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselogin();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s4 = peg$c15;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseip_addr();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s6 = peg$c15;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseint();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 32) {
                      s8 = peg$c15;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseint();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 32) {
                          s10 = peg$c15;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c16); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseint();
                          if (s11 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 32) {
                              s12 = peg$c15;
                              peg$currPos++;
                            } else {
                              s12 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c16); }
                            }
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parseint();
                              if (s13 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 32) {
                                  s14 = peg$c15;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parseno_space();
                                  if (s15 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 32) {
                                      s16 = peg$c15;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parseencoded();
                                      if (s17 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 32) {
                                          s18 = peg$c15;
                                          peg$currPos++;
                                        } else {
                                          s18 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                        }
                                        if (s18 !== peg$FAILED) {
                                          s19 = peg$parseno_space();
                                          if (s19 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 32) {
                                              s20 = peg$c15;
                                              peg$currPos++;
                                            } else {
                                              s20 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                            }
                                            if (s20 !== peg$FAILED) {
                                              s21 = peg$parsestate();
                                              if (s21 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 32) {
                                                  s22 = peg$c15;
                                                  peg$currPos++;
                                                } else {
                                                  s22 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                                                }
                                                if (s22 !== peg$FAILED) {
                                                  s23 = peg$parseencoded();
                                                  if (s23 !== peg$FAILED) {
                                                    peg$reportedPos = s0;
                                                    s1 = peg$c49(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23);
                                                    s0 = s1;
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c4;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c4;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c4;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c4;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c4;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c4;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c4;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c4;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c4;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c4;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c4;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c4;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c4;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c4;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c4;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c4;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c4;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c4;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c4;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c4;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }

      return s0;
    }

    function peg$parsedests() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c50;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsedests_logins();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c52;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c54(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsedests_login();
      }

      return s0;
    }

    function peg$parsedests_logins() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsedests_login();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c55;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedests_logins();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c57(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedests_login();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c58(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsedests_login() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 58) {
        s1 = peg$c24;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseint();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c59(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselogin();
      }

      return s0;
    }

    function peg$parseip_addr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
      } else {
        s2 = peg$c4;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c63;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c61.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); }
              }
            }
          } else {
            s4 = peg$c4;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c63;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c64); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              if (peg$c61.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c62); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c61.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                  }
                }
              } else {
                s6 = peg$c4;
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s7 = peg$c63;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c64); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  if (peg$c61.test(input.charAt(peg$currPos))) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
                  }
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      if (peg$c61.test(input.charAt(peg$currPos))) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c62); }
                      }
                    }
                  } else {
                    s8 = peg$c4;
                  }
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c4;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c4;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c4;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c4;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c4;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c4;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemd5_hash() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseint() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
      } else {
        s2 = peg$c4;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseencoded() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseno_space();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c68(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseno_space() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c69.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c69.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserandom_data() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.length > peg$currPos) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c71); }
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselogin() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c72.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c72.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c73); }
          }
        }
      } else {
        s1 = peg$c4;
      }
      if (s1 !== peg$FAILED) {
        s1 = input.substring(s0, peg$currPos);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestate() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c74.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c74.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c75); }
          }
        }
      } else {
        s2 = peg$c4;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c24;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseint();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c76(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c4;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c4;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c4;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$c74.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c75); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c74.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c75); }
            }
          }
        } else {
          s2 = peg$c4;
        }
        if (s2 !== peg$FAILED) {
          s2 = input.substring(s1, peg$currPos);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c77(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
